C51 COMPILER V9.00   MAIN                                                                  11/14/2018 17:28:45 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\ProgramFiles\Keil_v5\C51\BIN\C51.EXE Device\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Device;.\Ap
                    -p_User\Include) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          //======================================================
   2          // Main program routine
   3          // - Device name  : MC96F6508A
   4          // - Package type : 52LQFP
   5          //======================================================
   6          // For XDATA variable : V1.041.00 ~
   7          #define         MAIN    1
   8          
   9          // Generated    : Wed, Nov 14, 2018 (10:39:34)
  10          #include        "MC96F6508A.h"
  11          #include        "func_def.h"
  12          #include    "app_main.h"
  13          int testINT;
  14          void main()
  15          {
  16   1              cli();                  // disable INT. during peripheral setting
  17   1              port_init();            // initialize ports
  18   1              clock_init();           // initialize operation clock
  19   1              LCD_init();             // initialize LCD
  20   1              Timer0_init();          // initialize Timer0
  21   1              Timer3_init();          // initialize Timer3
  22   1              //UART_init();          // initialize UART interface
  23   1              //WDT_init();           // initialize Watch-dog timer//从Program Size（编译时显示的"Program Size:
  24   1                                                      // data=95.0 xdata=25 code=3244"(这个大小是现在注释的时候的)）可以看出
  25   1                                                      //，程序在data开辟了大量的数据（95 Byte），在启动代码中会执行对data的
  26   1                                                      //初始化，由于开启了(如果)看门狗,同时由于定义的data很大，在启动代码中
  27   1                                                      //执行初始化时间远远超过了喂狗时间，所以导致执行启动代码的过程中看门狗
  28   1                                                      //复位，一直进不了主程序，关不了狗，程序就一直复位，无限循环，会一直停
  29   1                                                      //在"?C_STARTUP:     LJMP    STARTUP1"这里。【大部分(好的)程序员会在
  30   1                                                      //main函数(这里是app_main函数)的第一句话才把看门狗打开】
  31   1                                                      //参考网址：http://blog.sina.com.cn/s/blog_69d693150101ddk6.html
  32   1                                                      //所以把看门狗打开放在了PowerON_Reset()函数中
  33   1              WT_init();              // initialize Watch timer
  34   1              sei();                  // enable INT.
  35   1              
  36   1              // TODO: add your main code here
  37   1              app_main();
  38   1              while(1);
  39   1      }
  40          
  41          //======================================================
  42          // interrupt routines
  43          //======================================================
  44          
  45          void INT_UART_Rx() interrupt 9
  46          {
  47   1              // UART Rx interrupt
  48   1              // TODO: add your code here
  49   1      
  50   1      }
  51          
  52          void INT_UART_Tx() interrupt 10
  53          {
  54   1              // UART Tx interrupt
C51 COMPILER V9.00   MAIN                                                                  11/14/2018 17:28:45 PAGE 2   

  55   1              // TODO: add your code here
  56   1      
  57   1      }
  58          
  59          void INT_Timer0() interrupt 13
  60          {
  61   1              // Timer0 interrupt
  62   1              // TODO: add your code here
  63   1              Sys_Tick();
  64   1      
  65   1      }
  66          
  67          void INT_Timer3() interrupt 16
  68          {
  69   1              // Timer3 interrupt
  70   1              // TODO: add your code here
  71   1      
  72   1      }
  73          
  74          void INT_WT() interrupt 20
  75          {
  76   1              // Watch timer interrupt
  77   1              // TODO: add your code here
  78   1      
  79   1      }
  80          
  81          //======================================================
  82          // peripheral setting routines
  83          //======================================================
  84          
  85          unsigned char UART_read()
  86          {
  87   1              unsigned char dat;
  88   1              
  89   1              while(!(UARTST & 0x20));        // wait
  90   1              dat = UARTDR;           // read
  91   1              return  dat;
  92   1      }
  93          
  94          void LCD_init()
  95          {
  96   1              // initialize LCD
  97   1              // Frame freq. = 16.000000Hz
  98   1              LCDCRH = 0x00;          // LCD control High
  99   1              LCDCRL = 0x00;          // LCD control Low
 100   1              LCDCCR = 0x00;          // LCD Contrast control
 101   1      }
 102          
 103          void Timer0_init()
 104          {
 105   1              // initialize Timer0
 106   1              // 8bit timer, period = 1.000000mS
 107   1              T0CR = 0x92;            // timer setting
 108   1              T0DR = 0x7C;            // period count
 109   1              IE2 |= 0x02;            // Enable Timer0 interrupt
 110   1              T0CR |= 0x01;           // clear counter
 111   1      }
 112          
 113          void Timer3_init()
 114          {
 115   1              // initialize Timer3
 116   1              // 8bit timer, period = 1.000000mS
C51 COMPILER V9.00   MAIN                                                                  11/14/2018 17:28:45 PAGE 3   

 117   1              T3DR = 0x7C;            // period count
 118   1              T3CR = 0x8E;            // timer setting
 119   1              IE2 |= 0x10;            // Enable Timer3 interrupt
 120   1              T3CR |= 0x01;           // clear counter
 121   1      }
 122          
 123          bit  enUart=0;
 124          void UART_init()
 125          {
 126   1              // initialize UART interface
 127   1              // UART : 9615bps N 8 1
 128   1              if(!enUart)
 129   1              {
 130   2                      UARTCR2  = 0x02;        // activate UART
 131   2                      UARTCR1  = 0x06;        // bit count, parity
 132   2                      UARTCR2 |= 0xEC;        // interrupt, speed
 133   2                      UARTCR3  = 0x00;        // stop bit
 134   2                      UARTBD   = 0x67;        // baud rate
 135   2                      IE1     |= 0x18;        // enable UART interrupt
 136   2              }
 137   1              enUart=1;
 138   1      }
 139          
 140          void UART_Def_Init()
 141          {
 142   1              // initialize UART interface
 143   1              // UART : 9615bps N 8 1
 144   1              if(enUart)
 145   1              {
 146   2                      UARTCR2  = 0x00;        // activate UART
 147   2                      UARTCR1  = 0x00;        // bit count, parity
 148   2                      UARTCR2 |= 0x00;        // interrupt, speed
 149   2                      UARTCR3  = 0x00;        // stop bit
 150   2                      UARTBD   = 0x00;        // baud rate
 151   2                      IE1     &=~0x18;    // disable UART interrupt
 152   2              }
 153   1              enUart=0;
 154   1      }
 155          
 156          void UART_write(unsigned char dat)
 157          {
 158   1              while(!(UARTST & 0x80));        // wait
 159   1              UARTDR = dat;           // write
 160   1      }
 161          
 162          void WDT_clear()
 163          {
 164   1              WDTCR |= 0x20;          // Clear Watch-dog timer
 165   1      }
 166          
 167          void WDT_init()
 168          {
 169   1              // initialize Watch-dog timer
 170   1              WDTDR = 0x01;           // period
 171   1              WDTCR = 0xC0;           // setting
 172   1              //WDTCR |= 0x02;        // Use WDTRC
 173   1              WDT_clear();
 174   1      }
 175          
 176          void WT_init()
 177          {
 178   1              // initialize Watch timer
C51 COMPILER V9.00   MAIN                                                                  11/14/2018 17:28:45 PAGE 4   

 179   1              WTCR = 0x80;            // setting
 180   1              WTDR = 0x01;            // set duty
 181   1              WTDR = 0x81;            // clear WT
 182   1              IE3 |= 0x04;            // Enable WT interrupt
 183   1      }
 184          
 185          void clock_init()
 186          {
 187   1              // internal RC clock (16.000000MHz)
 188   1              OSCCR = 0x28;           // Set Int. OSC
 189   1              SCCR  = 0x00;           // Use Int. OSC
 190   1      //      // external clock//外部时钟源配置
 191   1      //      OSCCR = 0x0A;           // Enable int. 1MHz and Ext. OSC
 192   1      //      BITCR = 0x09;           // Set waiting time : 16ms@1MHz
 193   1      //      while((BITCR & 0x80) == 0);     // Ext. OSC stabilizing time
 194   1      //      SCCR = 0x01;            // Change to Ext. OSC
 195   1      //      OSCCR |= 0x04;          // Disable Int. OSC
 196   1      }
 197          
 198          void port_init()
 199          {
 200   1              // initialize ports
 201   1              //   1 : P13      in  
 202   1              //   2 : P14      out 
 203   1              //   3 : P15      out 
 204   1              //   8 : P60      out 
 205   1              //   9 : P61      in  
 206   1              //  10 : P62      in  
 207   1              //  11 : SXIN     in  
 208   1              //  12 : SXOUT    out 
 209   1              //  14 : P20      out 
 210   1              //  15 : P21      out 
 211   1              //  16 : P22      out 
 212   1              //  17 : P23      out 
 213   1              //  18 : P24      out 
 214   1              //  19 : P25      out 
 215   1              //  20 : P26      out 
 216   1              //  21 : P27      out 
 217   1              //  22 : P30      out 
 218   1              //  23 : P31      out 
 219   1              //  24 : P32      out 
 220   1              //  25 : P33      out 
 221   1              //  26 : P34      out 
 222   1              //  27 : P35      out 
 223   1              //  28 : P36      out 
 224   1              //  29 : P37      out 
 225   1              //  30 : P40      out 
 226   1              //  31 : P41      out 
 227   1              //  32 : P42      out 
 228   1              //  33 : P43      out 
 229   1              //  34 : P44      out 
 230   1              //  35 : P45      out 
 231   1              //  36 : P46      out 
 232   1              //  37 : P47      out 
 233   1              //  38 : P50      out 
 234   1              //  39 : P51      out 
 235   1              //  40 : P52      out 
 236   1              //  41 : P53      out 
 237   1              //  42 : P54      out 
 238   1              //  43 : P55      in  
 239   1              //  44 : TXD      out 
 240   1              //  45 : RXD      in  
C51 COMPILER V9.00   MAIN                                                                  11/14/2018 17:28:45 PAGE 5   

 241   1              //  46 : P00      in  
 242   1              //  47 : P01      out 
 243   1              //  48 : P02      out 
 244   1              //  49 : P03      in  
 245   1              //  50 : P10      in  
 246   1              //  51 : P11      in  
 247   1              //  52 : P12      in  
 248   1              P0IO = 0xF6;            // direction
 249   1              P0PU = 0x00;            // pullup
 250   1              P0OD = 0x00;            // open drain
 251   1              P0DB = 0x00;            // bit7~6(debounce clock), bit1~0=P01~00 debounce
 252   1              P0   = 0x00;            // port initial value
 253   1      
 254   1              P1IO = 0xF0;            // direction
 255   1              P1PU = 0x0F;            // pullup
 256   1              P1OD = 0x00;            // open drain
 257   1              P1DB = 0x00;            // P17~10 debounce
 258   1              P1   = 0x00;            // port initial value
 259   1      
 260   1              P2IO = 0xFF;            // direction
 261   1              P2PU = 0x00;            // pullup
 262   1              P2OD = 0x00;            // open drain
 263   1              P2   = 0x00;            // port initial value
 264   1      
 265   1              P3IO = 0xFF;            // direction
 266   1              P3PU = 0x00;            // pullup
 267   1              P3OD = 0x00;            // open drain
 268   1              P3   = 0x00;            // port initial value
 269   1      
 270   1              P4IO = 0xFF;            // direction
 271   1              P4PU = 0x00;            // pullup
 272   1              P4OD = 0x00;            // open drain
 273   1              P4   = 0x00;            // port initial value
 274   1      
 275   1              P5IO = 0x5F;            // direction
 276   1              P5PU = 0x00;            // pullup
 277   1              P5OD = 0x00;            // open drain
 278   1              P5   = 0x00;            // port initial value
 279   1      
 280   1              P6IO = 0xF1;            // direction
 281   1              P6PU = 0x00;            // pullup
 282   1              P6OD = 0x00;            // open drain
 283   1              P6   = 0x00;            // port initial value
 284   1      
 285   1              // Set port functions
 286   1              P0FSR = 0x00;           // P0 selection
 287   1              P2FSR = 0x00;           // P2 selection
 288   1              P3FSR = 0x00;           // P3 selection
 289   1              P4FSR = 0x00;           // P4 selection
 290   1              P5FSRH = 0x18;          // P5 selection High
 291   1              P5FSRL = 0x00;          // P5 selection Low
 292   1              P6FSR = 0x0C;           // P6 selection
 293   1      }
 294          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    303    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
C51 COMPILER V9.00   MAIN                                                                  11/14/2018 17:28:45 PAGE 6   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
