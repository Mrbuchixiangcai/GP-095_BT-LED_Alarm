C51 COMPILER V9.00   BT_MODE                                                               11/14/2018 15:34:58 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE BT_MODE
OBJECT MODULE PLACED IN .\Objects\BT_Mode.obj
COMPILER INVOKED BY: D:\ProgramFiles\Keil_v5\C51\BIN\C51.EXE App_User\Source\BT_Mode.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.
                    -\Device;.\App_User\Include) DEBUG OBJECTEXTEND PRINT(.\Listings\BT_Mode.lst) OBJECT(.\Objects\BT_Mode.obj)

line level    source

   1          /*******************/
   2          /*头文件header file*/
   3          /*******************/
   4          #include "app_main.h"
   5          
   6          /************************/
   7          /*宏定义macro definition*/
   8          /************************/
   9          
  10          /*************************/
  11          /*类型定义byte definition*/
  12          /*************************/
  13          BT_STEP  BT_Step_TypeDef;
  14          MUSIC_MODE_TypeDef Music_Mode_TypeDef;
  15          
  16          /****************************/
  17          /*标志位定义flags definetion*/
  18          /****************************/
  19          bit Flag_BT_work;
  20          bit Flag_BT_Connect;//蓝牙连接标志位
  21          bit Flag_BT_Play;   //蓝牙播放
  22          bit Flag_BT_Pause;  //暂停
  23          bit Flag_UART1_RX_Finish_A;
  24          bit Flag_UART1_RX_Finish_B;
  25          bit Flag_UART_ReceiveBuffer_A_B;
  26          
  27          /*****************************/
  28          /*变量定义variable definition*/
  29          /*****************************/
  30          uint8_t  idata bt_cmd;
  31          uint8_t  idata cntMuteBT;
  32          uint8_t  idata btVolume;
  33          uint8_t  idata uart1_RX_Pointer;
  34          uint8_t  idata uart1_TX_Pointer;
  35          uint8_t  idata uart1_EnableSend;
  36          uint8_t  idata uart1_TX_Timeout;
  37          uint8_t  idata uart1_RX_Timeout;
  38          
  39          /**************************/
  40          /*数组定义array definition*/
  41          /**************************/
  42          uint8_t  xdata uart1_TransmitBuffer[UART1_LEN_BUFFER];
  43          uint8_t  xdata uart1_ReceiveBuffer_A[UART1_LEN_BUFFER];
  44          uint8_t  xdata uart1_ReceiveBuffer_B[UART1_LEN_BUFFER];
  45          char  code BT_Command_Tab[][9]= //用于改变歌曲时发送给wifi的第几首歌
  46          {
  47                  "      \r\n ",//NONE
  48                  "COM+PA\r\n ",//BT_PALY
  49                  "COM+PU\r\n ",//BT_PAUSE
  50                  "COM+PV\r\n ",//BT_PREV
  51                  "COM+PN\r\n ",//BT_NEXT
  52                  "COM+PR\r\n ",//BT_PARIR
  53                  //"COM+\r\n",//BT_PARIR_EXT
  54                  "COM+AC\r\n ",//BT_LINK_BACK
C51 COMPILER V9.00   BT_MODE                                                               11/14/2018 15:34:58 PAGE 2   

  55                  "COM+PWD\r\n",//BT_POWER_DOWN
  56                  "COM+DC\r\n ",//BT_DISCONN
  57                  //"COM+\r\n",//BT_CLEAR_LIST
  58                  "COM+V00\r\n",//音量
  59                  "COM+V01\r\n",
  60                  "COM+V02\r\n",
  61                  "COM+V03\r\n",
  62                  "COM+V04\r\n",
  63                  "COM+V05\r\n",
  64                  "COM+V06\r\n",
  65                  "COM+V07\r\n",
  66                  "COM+V08\r\n",
  67                  "COM+V09\r\n",
  68                  "COM+V10\r\n",
  69                  "COM+V11\r\n",
  70                  "COM+V12\r\n",
  71                  "COM+V13\r\n",  
  72                  "COM+V14\r\n",
  73                  "COM+V15\r\n",  
  74                  "COM+V16\r\n",
  75          };
  76          /******************************/
  77          /*函数声明Function declaration*/
  78          /******************************/
  79          
  80          /*****************************/
  81          /*函数定义function definetion*/
  82          /*****************************/
  83          /*******************************************************************************
  84           * 函数原型：
  85           * 输入参数：
  86           * 输出参数：
  87           * 函数功能：串口发送字符
  88           * 返回值说明：
  89           * 创建日期：
  90           * 创建人：
  91           * 修改日期
  92           * 修改人：
  93           * 第N次修改：
  94           * 修改原因：
  95           * 备注：
  96           *******************************************************************************/
  97           void Uart1Transmit_SendString(char *str)
  98           {
  99   1               uint8_t  i;
 100   1               while(uart1_EnableSend);
 101   1               for(i=0;i<UART1_LEN_BUFFER;i++)
 102   1               {
 103   2                      uart1_TransmitBuffer[i]=0;
 104   2               }
 105   1               for(i=0;*str!='\0';i++)
 106   1               {
 107   2                       uart1_TransmitBuffer[i]=*str;
 108   2                       str++;
 109   2               }
 110   1               uart1_TX_Pointer=0;
 111   1               uart1_EnableSend=1;
 112   1               UARTDR=uart1_TransmitBuffer[uart1_TX_Pointer++];
 113   1       }
 114           
 115           
 116           /*******************************************************************************
C51 COMPILER V9.00   BT_MODE                                                               11/14/2018 15:34:58 PAGE 3   

 117           * 函数原型：
 118           * 输入参数：
 119           * 输出参数：
 120           * 函数功能：发送命令，通过传进来的数据判断选择哪个命令发送
 121           * 返回值说明：
 122           * 创建日期：
 123           * 创建人：
 124           * 修改日期
 125           * 修改人：
 126           * 第N次修改：
 127           * 修改原因：
 128           * 备注：
 129           *******************************************************************************/
 130          void BT_Send_CMD(uint8_t cmd)
 131          {
 132   1              uint8_t  code bt_VOL_Send_Tab[]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 133   1              if(cmd<BT_VOL)
 134   1                      Uart1Transmit_SendString(&BT_Command_Tab[cmd][0]);
 135   1              else
 136   1                      Uart1Transmit_SendString(&BT_Command_Tab[BT_VOL+bt_VOL_Send_Tab[sysVolume]][0]);
 137   1      }
 138           
 139           /*******************************************************************************
 140           * 函数原型：
 141           * 输入参数：
 142           * 输出参数：
 143           * 函数功能：
 144           * 返回值说明：
 145           * 创建日期：
 146           * 创建人：
 147           * 修改日期
 148           * 修改人：
 149           * 第N次修改：
 150           * 修改原因：
 151           * 备注：
 152           *******************************************************************************/
 153          void BlueMode_Receive(void)
 154          {
 155   1              uint8_t  i;
 156   1              char *BT_CMD;
 157   1              if((Flag_UART1_RX_Finish_A) || (Flag_UART1_RX_Finish_B))
 158   1              {
 159   2                      if(Flag_UART1_RX_Finish_A)
 160   2                      {
 161   3                              Flag_UART1_RX_Finish_A=0;
 162   3                              BT_CMD=uart1_ReceiveBuffer_A;
 163   3                      }
 164   2                      else 
 165   2                      {
 166   3                              Flag_UART1_RX_Finish_B=0;
 167   3                              BT_CMD=uart1_ReceiveBuffer_B;
 168   3                      }
 169   2                      if((BT_CMD[0] == 'B') && (BT_CMD[1] == 'T'))
 170   2                      {
 171   3                              if ((BT_CMD[3] == 'C') && (BT_CMD[4] == 'N'))
 172   3                              {
 173   4                                      Flag_BT_Connect = 1;
 174   4                              }
 175   3                              //else if ((BT_CMD[3] == '') && (BT_CMD[4] == ''))//没有断开状态发送给MCU
 176   3                              //{
 177   3                              //      Flag_BT_Connect = 0;
 178   3                              //}
C51 COMPILER V9.00   BT_MODE                                                               11/14/2018 15:34:58 PAGE 4   

 179   3                              if ((BT_CMD[3] == 'P') && (BT_CMD[4] == 'A'))
 180   3                              {
 181   4                                      Flag_BT_Play = 1;//蓝牙正在播放
 182   4                              }
 183   3                              if ((BT_CMD[3] == ' ') && (BT_CMD[4] == ' '))
 184   3                              {
 185   4                                      Flag_BT_Play = 1;//蓝牙正在播放
 186   4                              }
 187   3                      }
 188   2                      
 189   2                      for(i=0;i<UART1_LEN_BUFFER;i++)
 190   2                              BT_CMD[i]=0;
 191   2              }
 192   1      }
 193           
 194           /*******************************************************************************
 195           * 函数原型：
 196           * 输入参数：
 197           * 输出参数：
 198           * 函数功能：
 199           * 返回值说明：
 200           * 创建日期：
 201           * 创建人：
 202           * 修改日期
 203           * 修改人：
 204           * 第N次修改：
 205           * 修改原因：
 206           * 备注：
 207           *******************************************************************************/
 208          void BlueMode_Handle(void) //接收到的数据信息/状态进行处理
 209          {
 210   1              BlueMode_Receive();
 211   1              if (Music_Mode_TypeDef == MUSIC_BT)
 212   1              {
 213   2                      if (Flag_BT_work == 0)//初始化蓝牙
 214   2                      {
 215   3                              cntMuteBT = 0;
 216   3                              Flag_BT_Connect = 0;
 217   3                              Flag_BT_Play = 0;
 218   3                              btVolume = ~sysVolume;
 219   3                              BT_Step_TypeDef = BT_STEP_START;
 220   3                      }
 221   2                      Flag_BT_work = 1;
 222   2                      switch (BT_Step_TypeDef)
 223   2                      {
 224   3                              case BT_STEP_START:
 225   3                                      __EN_MUTE();//先静音
 226   3                                      BT_Step_TypeDef++;
 227   3                                      break;
 228   3                              case BT_STEP_INITI1:
 229   3                                      UART_Def_Init(); //先清除串口初始化
 230   3                                      BT_CLR_POWER();  //先使蓝牙芯片断电
 231   3                                      BT_Step_TypeDef++;
 232   3                                      break;
 233   3                              case BT_STEP_INITI2:
 234   3                                      BT_Step_TypeDef++;
 235   3                                      break;
 236   3                              case BT_STEP_INITI3:
 237   3                                      BT_SET_POWER();  //让蓝牙上电
 238   3                                      BT_Step_TypeDef++;
 239   3                                      break;
 240   3                              case BT_STEP_INITI4:
C51 COMPILER V9.00   BT_MODE                                                               11/14/2018 15:34:58 PAGE 5   

 241   3                                      UART_init(); //初始化串口
 242   3                                      BT_Step_TypeDef++;
 243   3                                      break;
 244   3                              default:
 245   3                                      if (sysVolume != btVolume)
 246   3                                      {
 247   4                                              btVolume = sysVolume;
 248   4                                              BT_Send_CMD(BT_VOL); //串口发送音量信息到蓝牙端
 249   4                                      }
 250   3                                      else if (bt_cmd)
 251   3                                      {
 252   4                                              BT_Send_CMD(bt_cmd);
 253   4                                              bt_cmd = BT_NONE;  //清零
 254   4                                      }
 255   3                                      if (BT_MUTE_DET()) //检测蓝牙是否发出静音命令
 256   3                                      {
 257   4                                              if (cntMuteBT > 5)
 258   4                                              {
 259   5                                                      __DE_MUTE(); //解除静音
 260   5                                              }
 261   4                                              else
 262   4                                                      cntMuteBT++;
 263   4                                      }
 264   3                                      else
 265   3                                      {
 266   4                                              __EN_MUTE(); //静音
 267   4                                      }
 268   3                                      break;
 269   3                      }
 270   2              }
 271   1              else
 272   1              {
 273   2                      if (Flag_BT_work == 1)
 274   2                      {
 275   3                              cntMuteBT = 0;
 276   3                              BT_Step_TypeDef = BT_STEP_START;
 277   3                      }
 278   2                      Flag_BT_work = 0;
 279   2                      switch (BT_Step_TypeDef)
 280   2                      {
 281   3                              case BT_STEP_START:
 282   3                                      __EN_MUTE();//先静音
 283   3                                      BT_Step_TypeDef++;
 284   3                                      break;
 285   3                              case BT_STEP_INITI1:
 286   3                                      BT_Step_TypeDef++;
 287   3                                      break;
 288   3                              case BT_STEP_INITI2:
 289   3                                      BT_Step_TypeDef++;
 290   3                                      break;
 291   3                              case BT_STEP_INITI3:
 292   3                                      BT_SET_POWER();  //让蓝牙上电
 293   3                                      BT_Step_TypeDef++;
 294   3                                      break;
 295   3                              case BT_STEP_INITI4:
 296   3                                      BT_Step_TypeDef++;
 297   3                                      break;
 298   3                              default:
 299   3                                      break;
 300   3                      }
 301   2              }
 302   1      }
C51 COMPILER V9.00   BT_MODE                                                               11/14/2018 15:34:58 PAGE 6   

 303           
 304           /*******************************************************************************
 305           * 函数原型：
 306           * 输入参数：
 307           * 输出参数：
 308           * 函数功能：
 309           * 返回值说明：
 310           * 创建日期：
 311           * 创建人：
 312           * 修改日期
 313           * 修改人：
 314           * 第N次修改：
 315           * 修改原因：
 316           * 备注：
 317           *******************************************************************************/
 318          
 319          
 320          
 321          
 322          
 323          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    427    ----
   CONSTANT SIZE    =    250    ----
   XDATA SIZE       =     24    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       3
   IDATA SIZE       =      8    ----
   BIT SIZE         =      7    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
